{
  "stats": {
    "suites": 9,
    "tests": 19,
    "passes": 19,
    "pending": 0,
    "failures": 0,
    "start": "2018-01-09T14:54:14.815Z",
    "end": "2018-01-09T14:54:16.962Z",
    "duration": 2147,
    "testsRegistered": 19,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "title": "",
    "suites": [
      {
        "title": "UT02: API",
        "suites": [
          {
            "title": "UT02-01: GET /",
            "suites": [],
            "tests": [
              {
                "title": "UT02-01-01: Should List all Settings",
                "fullTitle": "UT02: API UT02-01: GET / UT02-01-01: Should List all Settings",
                "timedOut": false,
                "duration": 26,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "superagent.get(uri + '/').end(function (err, res) {\n  assert.ifError(err)\n  assert.equal(res.status, status.OK)\n  var result = JSON.parse(res.text)\n  assert.equal(Object.keys(result).length, 4)\n  assert.equal(result[setting], setting_val1)\n  done()\n})",
                "err": {},
                "isRoot": false,
                "uuid": "92358c54-6532-44c3-bdf8-7a51bebe24bf",
                "parentUUID": "11e572b1-daeb-4e11-ab53-959325b18867",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/test.api.js",
            "uuid": "11e572b1-daeb-4e11-ab53-959325b18867",
            "beforeHooks": [],
            "afterHooks": [],
            "fullFile": "/mnt/c/Users/sigmu/Code/timo/settings/tests/test.api.js",
            "passes": [
              {
                "title": "UT02-01-01: Should List all Settings",
                "fullTitle": "UT02: API UT02-01: GET / UT02-01-01: Should List all Settings",
                "timedOut": false,
                "duration": 26,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "superagent.get(uri + '/').end(function (err, res) {\n  assert.ifError(err)\n  assert.equal(res.status, status.OK)\n  var result = JSON.parse(res.text)\n  assert.equal(Object.keys(result).length, 4)\n  assert.equal(result[setting], setting_val1)\n  done()\n})",
                "err": {},
                "isRoot": false,
                "uuid": "92358c54-6532-44c3-bdf8-7a51bebe24bf",
                "parentUUID": "11e572b1-daeb-4e11-ab53-959325b18867",
                "isHook": false,
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasBeforeHooks": false,
            "hasAfterHooks": false,
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 26,
            "rootEmpty": false
          },
          {
            "title": "UT02-02: GET /:setting",
            "suites": [],
            "tests": [
              {
                "title": "UT02-02-01: Should get setting by name",
                "fullTitle": "UT02: API UT02-02: GET /:setting UT02-02-01: Should get setting by name",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "superagent.get(uri + '/' + setting).end(function (err, res) {\n  assert.ifError(err)\n  assert.equal(res.status, status.OK)\n  assert.equal(res.text, setting_val1)\n  done()\n})",
                "err": {},
                "isRoot": false,
                "uuid": "eb2858bd-5b5c-4704-9083-443258365860",
                "parentUUID": "16ab08e4-5186-43cf-a399-f39c31391743",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "UT02-02-02: Should get 404 on wrong id",
                "fullTitle": "UT02: API UT02-02: GET /:setting UT02-02-02: Should get 404 on wrong id",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "superagent.get(uri + '/some-id').end(function (err, res) {\n  if (err) {\n    assert.equal(res.status, status.NOT_FOUND)\n    done()\n  } else {\n    done(new Error('Here be an Error'))\n  }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "c6dceecc-391d-4e4b-8783-f553ca7334cf",
                "parentUUID": "16ab08e4-5186-43cf-a399-f39c31391743",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/test.api.js",
            "uuid": "16ab08e4-5186-43cf-a399-f39c31391743",
            "beforeHooks": [],
            "afterHooks": [],
            "fullFile": "/mnt/c/Users/sigmu/Code/timo/settings/tests/test.api.js",
            "passes": [
              {
                "title": "UT02-02-01: Should get setting by name",
                "fullTitle": "UT02: API UT02-02: GET /:setting UT02-02-01: Should get setting by name",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "superagent.get(uri + '/' + setting).end(function (err, res) {\n  assert.ifError(err)\n  assert.equal(res.status, status.OK)\n  assert.equal(res.text, setting_val1)\n  done()\n})",
                "err": {},
                "isRoot": false,
                "uuid": "eb2858bd-5b5c-4704-9083-443258365860",
                "parentUUID": "16ab08e4-5186-43cf-a399-f39c31391743",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "UT02-02-02: Should get 404 on wrong id",
                "fullTitle": "UT02: API UT02-02: GET /:setting UT02-02-02: Should get 404 on wrong id",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "superagent.get(uri + '/some-id').end(function (err, res) {\n  if (err) {\n    assert.equal(res.status, status.NOT_FOUND)\n    done()\n  } else {\n    done(new Error('Here be an Error'))\n  }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "c6dceecc-391d-4e4b-8783-f553ca7334cf",
                "parentUUID": "16ab08e4-5186-43cf-a399-f39c31391743",
                "isHook": false,
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasBeforeHooks": false,
            "hasAfterHooks": false,
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 9,
            "rootEmpty": false
          },
          {
            "title": "UT02-03: PUT /:setting",
            "suites": [],
            "tests": [
              {
                "title": "UT02-03-01: Should Update a Setting by Name",
                "fullTitle": "UT02: API UT02-03: PUT /:setting UT02-03-01: Should Update a Setting by Name",
                "timedOut": false,
                "duration": 23,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "superagent.put(uri + '/' + setting).type('text/plain').send(setting_val2).end(function (err, res) {\n  assert.ifError(err)\n  assert.equal(res.status, status.OK)\n  assert.equal(res.text, setting_val2)\n  superagent.get(uri + '/').end(function (err, res) {\n    assert.ifError(err)\n    assert.equal(res.status, status.OK)\n    var result = JSON.parse(res.text)\n    assert.equal(Object.keys(result).length, 4)\n    assert.equal(result[setting], setting_val2)\n    done()\n  })\n})",
                "err": {},
                "isRoot": false,
                "uuid": "a997ec97-a5cb-43c2-ad02-20dcd7280c36",
                "parentUUID": "f33a1d6d-f4e2-49eb-9ae3-d524cbfcea09",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "UT02-05-02: Should Error on no Data in PUT",
                "fullTitle": "UT02: API UT02-03: PUT /:setting UT02-05-02: Should Error on no Data in PUT",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "superagent.put(uri + '/' + setting).send({}).end(function (err, res) {\n  if (err) {\n    assert.equal(res.status, status.BAD_REQUEST)\n    superagent.get(uri + '/').end(function (err, res) {\n      assert.ifError(err)\n      assert.equal(res.status, status.OK)\n      var result = JSON.parse(res.text)\n      assert.equal(Object.keys(result).length, 4)\n      assert.equal(result[setting], setting_val2)\n      done()\n    })\n  } else {\n    done(new Error('Here be an Error'))\n  }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "7ad1a395-ebd6-458d-81a2-3a5df8e02bdc",
                "parentUUID": "f33a1d6d-f4e2-49eb-9ae3-d524cbfcea09",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "UT02-05-03: Should Error on wrong ID",
                "fullTitle": "UT02: API UT02-03: PUT /:setting UT02-05-03: Should Error on wrong ID",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "superagent.put(uri + '/someid').send(setting_val2).end(function (err, res) {\n  if (err) {\n    assert.equal(res.status, status.NOT_FOUND)\n    superagent.get(uri + '/').end(function (err, res) {\n      assert.ifError(err)\n      assert.equal(res.status, status.OK)\n      var result = JSON.parse(res.text)\n      assert.equal(Object.keys(result).length, 4)\n      assert.equal(result[setting], setting_val2)\n      done()\n    })\n  } else {\n    done(new Error('Here be an Error'))\n  }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "96bde638-b83e-481a-bd60-c44ef9316034",
                "parentUUID": "f33a1d6d-f4e2-49eb-9ae3-d524cbfcea09",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/test.api.js",
            "uuid": "f33a1d6d-f4e2-49eb-9ae3-d524cbfcea09",
            "beforeHooks": [],
            "afterHooks": [],
            "fullFile": "/mnt/c/Users/sigmu/Code/timo/settings/tests/test.api.js",
            "passes": [
              {
                "title": "UT02-03-01: Should Update a Setting by Name",
                "fullTitle": "UT02: API UT02-03: PUT /:setting UT02-03-01: Should Update a Setting by Name",
                "timedOut": false,
                "duration": 23,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "superagent.put(uri + '/' + setting).type('text/plain').send(setting_val2).end(function (err, res) {\n  assert.ifError(err)\n  assert.equal(res.status, status.OK)\n  assert.equal(res.text, setting_val2)\n  superagent.get(uri + '/').end(function (err, res) {\n    assert.ifError(err)\n    assert.equal(res.status, status.OK)\n    var result = JSON.parse(res.text)\n    assert.equal(Object.keys(result).length, 4)\n    assert.equal(result[setting], setting_val2)\n    done()\n  })\n})",
                "err": {},
                "isRoot": false,
                "uuid": "a997ec97-a5cb-43c2-ad02-20dcd7280c36",
                "parentUUID": "f33a1d6d-f4e2-49eb-9ae3-d524cbfcea09",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "UT02-05-02: Should Error on no Data in PUT",
                "fullTitle": "UT02: API UT02-03: PUT /:setting UT02-05-02: Should Error on no Data in PUT",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "superagent.put(uri + '/' + setting).send({}).end(function (err, res) {\n  if (err) {\n    assert.equal(res.status, status.BAD_REQUEST)\n    superagent.get(uri + '/').end(function (err, res) {\n      assert.ifError(err)\n      assert.equal(res.status, status.OK)\n      var result = JSON.parse(res.text)\n      assert.equal(Object.keys(result).length, 4)\n      assert.equal(result[setting], setting_val2)\n      done()\n    })\n  } else {\n    done(new Error('Here be an Error'))\n  }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "7ad1a395-ebd6-458d-81a2-3a5df8e02bdc",
                "parentUUID": "f33a1d6d-f4e2-49eb-9ae3-d524cbfcea09",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "UT02-05-03: Should Error on wrong ID",
                "fullTitle": "UT02: API UT02-03: PUT /:setting UT02-05-03: Should Error on wrong ID",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "superagent.put(uri + '/someid').send(setting_val2).end(function (err, res) {\n  if (err) {\n    assert.equal(res.status, status.NOT_FOUND)\n    superagent.get(uri + '/').end(function (err, res) {\n      assert.ifError(err)\n      assert.equal(res.status, status.OK)\n      var result = JSON.parse(res.text)\n      assert.equal(Object.keys(result).length, 4)\n      assert.equal(result[setting], setting_val2)\n      done()\n    })\n  } else {\n    done(new Error('Here be an Error'))\n  }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "96bde638-b83e-481a-bd60-c44ef9316034",
                "parentUUID": "f33a1d6d-f4e2-49eb-9ae3-d524cbfcea09",
                "isHook": false,
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasBeforeHooks": false,
            "hasAfterHooks": false,
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 3,
            "totalPasses": 3,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 35,
            "rootEmpty": false
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/tests/test.api.js",
        "uuid": "01c73162-de1e-479b-bcfe-e6e641139b1b",
        "beforeHooks": [
          {
            "title": "\"before all\" hook",
            "fullTitle": "UT02: API \"before all\" hook",
            "timedOut": false,
            "duration": 1034,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "fs.copyFile(dbSourcePath, dbPath, function (err) {\n  if (err) {\n    done(err)\n  } else {\n    server = spawn('node', ['./app.js', dbPath, testPort])\n    setTimeout(function () {\n      done()\n    }, 1000)\n  }\n})",
            "err": {},
            "isRoot": false,
            "uuid": "6203f2e3-8eff-462f-8b13-7fc8a194f2a9",
            "parentUUID": "01c73162-de1e-479b-bcfe-e6e641139b1b",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after all\" hook",
            "fullTitle": "UT02: API \"after all\" hook",
            "timedOut": false,
            "duration": 1002,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "server.kill('SIGHUP')\nsetTimeout(function () {\n  fs.unlink(dbPath, function (error) {\n    if (error) {\n      done(error)\n    } else {\n      done()\n    }\n  })\n}, 1000)",
            "err": {},
            "isRoot": false,
            "uuid": "a83dc7e1-024d-4324-8b46-2e1e3028f789",
            "parentUUID": "01c73162-de1e-479b-bcfe-e6e641139b1b",
            "isHook": true,
            "skipped": false
          }
        ],
        "fullFile": "/mnt/c/Users/sigmu/Code/timo/settings/tests/test.api.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasBeforeHooks": true,
        "hasAfterHooks": true,
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0,
        "rootEmpty": false
      },
      {
        "title": "UT01: settings",
        "suites": [
          {
            "title": "UT01-01: Object Contructor",
            "suites": [],
            "tests": [
              {
                "title": "UT01-01-01: should return an error with no path",
                "fullTitle": "UT01: settings UT01-01: Object Contructor UT01-01-01: should return an error with no path",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "try {\n  Settings()\n  done(new Error('there should be an error here'))\n} catch (error) {\n  done()\n}",
                "err": {},
                "isRoot": false,
                "uuid": "13584045-05fd-43e0-8688-e9d78aa1c727",
                "parentUUID": "26f621eb-07b6-473f-b42d-2e53afbe084b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "UT01-01-02: should return a settings object with a correct path",
                "fullTitle": "UT01: settings UT01-01: Object Contructor UT01-01-02: should return a settings object with a correct path",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "try {\n  var settings = new Settings(dbPath)\n  assert.equal(settings.file, dbPath)\n  assert.equal(Object.keys(settings.settings).length, 4)\n  done()\n} catch (error) {\n  done(error)\n}",
                "err": {},
                "isRoot": false,
                "uuid": "62eab251-4518-4e80-9d78-12894367cb14",
                "parentUUID": "26f621eb-07b6-473f-b42d-2e53afbe084b",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/test.settings.js",
            "uuid": "26f621eb-07b6-473f-b42d-2e53afbe084b",
            "beforeHooks": [],
            "afterHooks": [],
            "fullFile": "/mnt/c/Users/sigmu/Code/timo/settings/tests/test.settings.js",
            "passes": [
              {
                "title": "UT01-01-01: should return an error with no path",
                "fullTitle": "UT01: settings UT01-01: Object Contructor UT01-01-01: should return an error with no path",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "try {\n  Settings()\n  done(new Error('there should be an error here'))\n} catch (error) {\n  done()\n}",
                "err": {},
                "isRoot": false,
                "uuid": "13584045-05fd-43e0-8688-e9d78aa1c727",
                "parentUUID": "26f621eb-07b6-473f-b42d-2e53afbe084b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "UT01-01-02: should return a settings object with a correct path",
                "fullTitle": "UT01: settings UT01-01: Object Contructor UT01-01-02: should return a settings object with a correct path",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "try {\n  var settings = new Settings(dbPath)\n  assert.equal(settings.file, dbPath)\n  assert.equal(Object.keys(settings.settings).length, 4)\n  done()\n} catch (error) {\n  done(error)\n}",
                "err": {},
                "isRoot": false,
                "uuid": "62eab251-4518-4e80-9d78-12894367cb14",
                "parentUUID": "26f621eb-07b6-473f-b42d-2e53afbe084b",
                "isHook": false,
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasBeforeHooks": false,
            "hasAfterHooks": false,
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0,
            "rootEmpty": false
          },
          {
            "title": "UT01-02: settings.list",
            "suites": [],
            "tests": [
              {
                "title": "UT01-02-01: should throw an error with no callback given",
                "fullTitle": "UT01: settings UT01-02: settings.list UT01-02-01: should throw an error with no callback given",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "try {\n  TSettings.list()\n  done(new Error('there should be an error here'))\n} catch (error) {\n  done()\n}",
                "err": {},
                "isRoot": false,
                "uuid": "b7cd398d-1af6-4414-8325-a8ba4bbea33d",
                "parentUUID": "4581e959-6a25-4dd4-8759-df0537489fbc",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "UT01-02-02: should callback all settings",
                "fullTitle": "UT01: settings UT01-02: settings.list UT01-02-02: should callback all settings",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "TSettings.list(function (error, settings) {\n  if (error) {\n    done(error)\n  } else {\n    assert.equal(Object.keys(settings).length, 4)\n    assert.equal(settings[setting], setting_val1)\n    done()\n  }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "49313b72-866b-4269-b68b-ddee2f0084fd",
                "parentUUID": "4581e959-6a25-4dd4-8759-df0537489fbc",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/test.settings.js",
            "uuid": "4581e959-6a25-4dd4-8759-df0537489fbc",
            "beforeHooks": [
              {
                "title": "\"before all\" hook",
                "fullTitle": "UT01: settings UT01-02: settings.list \"before all\" hook",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "TSettings = new Settings(dbPath)\ndone()",
                "err": {},
                "isRoot": false,
                "uuid": "467b2fca-2f1a-4f8e-a2dd-af0e3ef4d07b",
                "parentUUID": "4581e959-6a25-4dd4-8759-df0537489fbc",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "fullFile": "/mnt/c/Users/sigmu/Code/timo/settings/tests/test.settings.js",
            "passes": [
              {
                "title": "UT01-02-01: should throw an error with no callback given",
                "fullTitle": "UT01: settings UT01-02: settings.list UT01-02-01: should throw an error with no callback given",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "try {\n  TSettings.list()\n  done(new Error('there should be an error here'))\n} catch (error) {\n  done()\n}",
                "err": {},
                "isRoot": false,
                "uuid": "b7cd398d-1af6-4414-8325-a8ba4bbea33d",
                "parentUUID": "4581e959-6a25-4dd4-8759-df0537489fbc",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "UT01-02-02: should callback all settings",
                "fullTitle": "UT01: settings UT01-02: settings.list UT01-02-02: should callback all settings",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "TSettings.list(function (error, settings) {\n  if (error) {\n    done(error)\n  } else {\n    assert.equal(Object.keys(settings).length, 4)\n    assert.equal(settings[setting], setting_val1)\n    done()\n  }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "49313b72-866b-4269-b68b-ddee2f0084fd",
                "parentUUID": "4581e959-6a25-4dd4-8759-df0537489fbc",
                "isHook": false,
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasBeforeHooks": true,
            "hasAfterHooks": false,
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0,
            "rootEmpty": false
          },
          {
            "title": "UT01-03: settings.getSetting",
            "suites": [],
            "tests": [
              {
                "title": "UT01-03-01: should throw an error with no callback given",
                "fullTitle": "UT01: settings UT01-03: settings.getSetting UT01-03-01: should throw an error with no callback given",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "try {\n  TSettings.getSetting(setting)\n  done(new Error('there should be an error here'))\n} catch (error) {\n  done()\n}",
                "err": {},
                "isRoot": false,
                "uuid": "3d3b3431-2eed-4129-bb37-8e06adb1528b",
                "parentUUID": "7a383574-5015-43d2-a661-25872c272ab8",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "UT01-03-02: should throw an error with no name given",
                "fullTitle": "UT01: settings UT01-03: settings.getSetting UT01-03-02: should throw an error with no name given",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "try {\n  TSettings.getSetting()\n  done(new Error('there should be an error here'))\n} catch (error) {\n  done()\n}",
                "err": {},
                "isRoot": false,
                "uuid": "feb29ffd-88af-432c-a168-27d0ee330aff",
                "parentUUID": "7a383574-5015-43d2-a661-25872c272ab8",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "UT01-03-03: should callback an error with a not existing name given",
                "fullTitle": "UT01: settings UT01-03: settings.getSetting UT01-03-03: should callback an error with a not existing name given",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "TSettings.getSetting('#', function (error, entry) {\n  if (error) {\n    assert.equal(error.message, 'No Setting with name # found')\n    done()\n  } else {\n    done(new Error('there should be an error here'))\n  }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "fc8effa6-3d6f-454b-a791-e5a14b364521",
                "parentUUID": "7a383574-5015-43d2-a661-25872c272ab8",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "UT01-03-04: should callback an object with a correct id given",
                "fullTitle": "UT01: settings UT01-03: settings.getSetting UT01-03-04: should callback an object with a correct id given",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "TSettings.getSetting(setting, function (error, setValue) {\n  if (error) {\n    done(error)\n  } else {\n    assert.equal(setValue, setting_val1)\n    done()\n  }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "41c1959b-c0b5-48bf-87e1-cefb8ae1d5f8",
                "parentUUID": "7a383574-5015-43d2-a661-25872c272ab8",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/test.settings.js",
            "uuid": "7a383574-5015-43d2-a661-25872c272ab8",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "UT01: settings UT01-03: settings.getSetting \"before each\" hook",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "TSettings = new Settings(dbPath)\ndone()",
                "err": {},
                "isRoot": false,
                "uuid": "de852ab9-eca7-44a4-8118-5bd6ffabefe5",
                "parentUUID": "7a383574-5015-43d2-a661-25872c272ab8",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after each\" hook",
                "fullTitle": "UT01: settings UT01-03: settings.getSetting \"after each\" hook",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "TSettings = {}\ndone()",
                "err": {},
                "isRoot": false,
                "uuid": "9e5b4e29-9a19-4718-9a23-d29c4f0d5d8a",
                "parentUUID": "7a383574-5015-43d2-a661-25872c272ab8",
                "isHook": true,
                "skipped": false
              }
            ],
            "fullFile": "/mnt/c/Users/sigmu/Code/timo/settings/tests/test.settings.js",
            "passes": [
              {
                "title": "UT01-03-01: should throw an error with no callback given",
                "fullTitle": "UT01: settings UT01-03: settings.getSetting UT01-03-01: should throw an error with no callback given",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "try {\n  TSettings.getSetting(setting)\n  done(new Error('there should be an error here'))\n} catch (error) {\n  done()\n}",
                "err": {},
                "isRoot": false,
                "uuid": "3d3b3431-2eed-4129-bb37-8e06adb1528b",
                "parentUUID": "7a383574-5015-43d2-a661-25872c272ab8",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "UT01-03-02: should throw an error with no name given",
                "fullTitle": "UT01: settings UT01-03: settings.getSetting UT01-03-02: should throw an error with no name given",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "try {\n  TSettings.getSetting()\n  done(new Error('there should be an error here'))\n} catch (error) {\n  done()\n}",
                "err": {},
                "isRoot": false,
                "uuid": "feb29ffd-88af-432c-a168-27d0ee330aff",
                "parentUUID": "7a383574-5015-43d2-a661-25872c272ab8",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "UT01-03-03: should callback an error with a not existing name given",
                "fullTitle": "UT01: settings UT01-03: settings.getSetting UT01-03-03: should callback an error with a not existing name given",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "TSettings.getSetting('#', function (error, entry) {\n  if (error) {\n    assert.equal(error.message, 'No Setting with name # found')\n    done()\n  } else {\n    done(new Error('there should be an error here'))\n  }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "fc8effa6-3d6f-454b-a791-e5a14b364521",
                "parentUUID": "7a383574-5015-43d2-a661-25872c272ab8",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "UT01-03-04: should callback an object with a correct id given",
                "fullTitle": "UT01: settings UT01-03: settings.getSetting UT01-03-04: should callback an object with a correct id given",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "TSettings.getSetting(setting, function (error, setValue) {\n  if (error) {\n    done(error)\n  } else {\n    assert.equal(setValue, setting_val1)\n    done()\n  }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "41c1959b-c0b5-48bf-87e1-cefb8ae1d5f8",
                "parentUUID": "7a383574-5015-43d2-a661-25872c272ab8",
                "isHook": false,
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasBeforeHooks": true,
            "hasAfterHooks": true,
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 4,
            "totalPasses": 4,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1,
            "rootEmpty": false
          },
          {
            "title": "UT01-04: settings.updateSetting",
            "suites": [],
            "tests": [
              {
                "title": "UT01-04-01: should throw an error with no id given",
                "fullTitle": "UT01: settings UT01-04: settings.updateSetting UT01-04-01: should throw an error with no id given",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "try {\n  TSettings.updateSetting()\n  done(new Error('there should be an error here'))\n} catch (error) {\n  done()\n}",
                "err": {},
                "isRoot": false,
                "uuid": "f45ffcc3-c425-48e7-bf0e-853f0326ae6d",
                "parentUUID": "069efcbb-c9b0-44d8-a71c-2a8a28ce32db",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "UT01-04-02: should throw an error with no data given",
                "fullTitle": "UT01: settings UT01-04: settings.updateSetting UT01-04-02: should throw an error with no data given",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "try {\n  TSettings.updateSetting(setting)\n  done(new Error('there should be an error here'))\n} catch (error) {\n  done()\n}",
                "err": {},
                "isRoot": false,
                "uuid": "fcda9e20-e0e1-46cd-be9c-239b34049620",
                "parentUUID": "069efcbb-c9b0-44d8-a71c-2a8a28ce32db",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "UT01-04-03: should throw an error with no callback given",
                "fullTitle": "UT01: settings UT01-04: settings.updateSetting UT01-04-03: should throw an error with no callback given",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "try {\n  TSettings.updateSetting(setting, setting_val2)\n  done(new Error('there should be an error here'))\n} catch (error) {\n  done()\n}",
                "err": {},
                "isRoot": false,
                "uuid": "4e18c615-b174-4cdd-a73b-5b4d08d2a1c3",
                "parentUUID": "069efcbb-c9b0-44d8-a71c-2a8a28ce32db",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "UT01-04-04: should callback an error with a not existing id given",
                "fullTitle": "UT01: settings UT01-04: settings.updateSetting UT01-04-04: should callback an error with a not existing id given",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "TSettings.updateSetting('#', setting_val2, function (error, obj) {\n  if (error) {\n    done()\n  } else {\n    done(new Error('there should be an error here'))\n  }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "bcddc287-4e6b-4c7b-9cf9-1ab942738568",
                "parentUUID": "069efcbb-c9b0-44d8-a71c-2a8a28ce32db",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "UT01-04-05: should callback an object with id given and database should contain this changed object",
                "fullTitle": "UT01: settings UT01-04: settings.updateSetting UT01-04-05: should callback an object with id given and database should contain this changed object",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "TSettings.updateSetting(setting, setting_val2, function (error, setVal) {\n  if (error) {\n    done(error)\n  } else {\n    assert.equal(setVal, setting_val2)\n    TSettings.list(function (error, settings) {\n      if (error) {\n        done(error)\n      } else {\n        assert.equal(Object.keys(settings).length, 4)\n        assert.equal(settings[setting], setting_val2)\n        done()\n      }\n    })\n  }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "237787ab-4dec-4dfe-a46b-26d4f41f894c",
                "parentUUID": "069efcbb-c9b0-44d8-a71c-2a8a28ce32db",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/tests/test.settings.js",
            "uuid": "069efcbb-c9b0-44d8-a71c-2a8a28ce32db",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "UT01: settings UT01-04: settings.updateSetting \"before each\" hook",
                "timedOut": false,
                "duration": 1,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "TSettings = new Settings(dbPath)\ndone()",
                "err": {},
                "isRoot": false,
                "uuid": "af4f3070-c740-4fd1-89d4-b4f57d81fe30",
                "parentUUID": "069efcbb-c9b0-44d8-a71c-2a8a28ce32db",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after each\" hook",
                "fullTitle": "UT01: settings UT01-04: settings.updateSetting \"after each\" hook",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "TSettings = {}\ndone()",
                "err": {},
                "isRoot": false,
                "uuid": "40768952-0c2b-4f07-9a7b-c5189b6097a2",
                "parentUUID": "069efcbb-c9b0-44d8-a71c-2a8a28ce32db",
                "isHook": true,
                "skipped": false
              }
            ],
            "fullFile": "/mnt/c/Users/sigmu/Code/timo/settings/tests/test.settings.js",
            "passes": [
              {
                "title": "UT01-04-01: should throw an error with no id given",
                "fullTitle": "UT01: settings UT01-04: settings.updateSetting UT01-04-01: should throw an error with no id given",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "try {\n  TSettings.updateSetting()\n  done(new Error('there should be an error here'))\n} catch (error) {\n  done()\n}",
                "err": {},
                "isRoot": false,
                "uuid": "f45ffcc3-c425-48e7-bf0e-853f0326ae6d",
                "parentUUID": "069efcbb-c9b0-44d8-a71c-2a8a28ce32db",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "UT01-04-02: should throw an error with no data given",
                "fullTitle": "UT01: settings UT01-04: settings.updateSetting UT01-04-02: should throw an error with no data given",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "try {\n  TSettings.updateSetting(setting)\n  done(new Error('there should be an error here'))\n} catch (error) {\n  done()\n}",
                "err": {},
                "isRoot": false,
                "uuid": "fcda9e20-e0e1-46cd-be9c-239b34049620",
                "parentUUID": "069efcbb-c9b0-44d8-a71c-2a8a28ce32db",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "UT01-04-03: should throw an error with no callback given",
                "fullTitle": "UT01: settings UT01-04: settings.updateSetting UT01-04-03: should throw an error with no callback given",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "try {\n  TSettings.updateSetting(setting, setting_val2)\n  done(new Error('there should be an error here'))\n} catch (error) {\n  done()\n}",
                "err": {},
                "isRoot": false,
                "uuid": "4e18c615-b174-4cdd-a73b-5b4d08d2a1c3",
                "parentUUID": "069efcbb-c9b0-44d8-a71c-2a8a28ce32db",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "UT01-04-04: should callback an error with a not existing id given",
                "fullTitle": "UT01: settings UT01-04: settings.updateSetting UT01-04-04: should callback an error with a not existing id given",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "TSettings.updateSetting('#', setting_val2, function (error, obj) {\n  if (error) {\n    done()\n  } else {\n    done(new Error('there should be an error here'))\n  }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "bcddc287-4e6b-4c7b-9cf9-1ab942738568",
                "parentUUID": "069efcbb-c9b0-44d8-a71c-2a8a28ce32db",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "UT01-04-05: should callback an object with id given and database should contain this changed object",
                "fullTitle": "UT01: settings UT01-04: settings.updateSetting UT01-04-05: should callback an object with id given and database should contain this changed object",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "TSettings.updateSetting(setting, setting_val2, function (error, setVal) {\n  if (error) {\n    done(error)\n  } else {\n    assert.equal(setVal, setting_val2)\n    TSettings.list(function (error, settings) {\n      if (error) {\n        done(error)\n      } else {\n        assert.equal(Object.keys(settings).length, 4)\n        assert.equal(settings[setting], setting_val2)\n        done()\n      }\n    })\n  }\n})",
                "err": {},
                "isRoot": false,
                "uuid": "237787ab-4dec-4dfe-a46b-26d4f41f894c",
                "parentUUID": "069efcbb-c9b0-44d8-a71c-2a8a28ce32db",
                "isHook": false,
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasBeforeHooks": true,
            "hasAfterHooks": true,
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 5,
            "totalPasses": 5,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 3,
            "rootEmpty": false
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/tests/test.settings.js",
        "uuid": "043ff23a-5737-480e-9977-65f810c136d7",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: UT01-00: Copy TestSettings",
            "fullTitle": "UT01: settings \"before all\" hook: UT01-00: Copy TestSettings",
            "timedOut": false,
            "duration": 3,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "fs.copyFile(dbSourcePath, dbPath, function (err) {\n  if (err) {\n    done(err)\n  } else {\n    done()\n  }\n})",
            "err": {},
            "isRoot": false,
            "uuid": "1873153d-711e-4e1e-914b-ad775132389f",
            "parentUUID": "043ff23a-5737-480e-9977-65f810c136d7",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after all\" hook: UT01-99: remove Copy of Database",
            "fullTitle": "UT01: settings \"after all\" hook: UT01-99: remove Copy of Database",
            "timedOut": false,
            "duration": 2,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "fs.unlink(dbPath, function (error) {\n  if (error) {\n    done(error)\n  } else {\n    done()\n  }\n})",
            "err": {},
            "isRoot": false,
            "uuid": "7c91660f-e402-4880-bc68-d2e5e9a1b8e3",
            "parentUUID": "043ff23a-5737-480e-9977-65f810c136d7",
            "isHook": true,
            "skipped": false
          }
        ],
        "fullFile": "/mnt/c/Users/sigmu/Code/timo/settings/tests/test.settings.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasBeforeHooks": true,
        "hasAfterHooks": true,
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0,
        "rootEmpty": false
      }
    ],
    "tests": [],
    "pending": [],
    "root": true,
    "_timeout": 2000,
    "uuid": "816e4b1b-366e-47d5-ac2d-dc61237e7eda",
    "beforeHooks": [],
    "afterHooks": [],
    "fullFile": "",
    "file": "",
    "passes": [],
    "failures": [],
    "skipped": [],
    "hasBeforeHooks": false,
    "hasAfterHooks": false,
    "hasTests": false,
    "hasSuites": true,
    "totalTests": 0,
    "totalPasses": 0,
    "totalFailures": 0,
    "totalPending": 0,
    "totalSkipped": 0,
    "hasPasses": false,
    "hasFailures": false,
    "hasPending": false,
    "hasSkipped": false,
    "duration": 0,
    "rootEmpty": true
  },
  "allTests": [
    {
      "title": "UT02-01-01: Should List all Settings",
      "fullTitle": "UT02-01: GET / UT02-01-01: Should List all Settings",
      "timedOut": false,
      "duration": 26,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "superagent.get(uri + '/').end(function (err, res) {\n  assert.ifError(err)\n  assert.equal(res.status, status.OK)\n  var result = JSON.parse(res.text)\n  assert.equal(Object.keys(result).length, 4)\n  assert.equal(result[setting], setting_val1)\n  done()\n})",
      "err": {},
      "isRoot": false,
      "uuid": "92358c54-6532-44c3-bdf8-7a51bebe24bf",
      "parentUUID": "11e572b1-daeb-4e11-ab53-959325b18867",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT02-02-01: Should get setting by name",
      "fullTitle": "UT02-02: GET /:setting UT02-02-01: Should get setting by name",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "superagent.get(uri + '/' + setting).end(function (err, res) {\n  assert.ifError(err)\n  assert.equal(res.status, status.OK)\n  assert.equal(res.text, setting_val1)\n  done()\n})",
      "err": {},
      "isRoot": false,
      "uuid": "eb2858bd-5b5c-4704-9083-443258365860",
      "parentUUID": "16ab08e4-5186-43cf-a399-f39c31391743",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT02-02-02: Should get 404 on wrong id",
      "fullTitle": "UT02-02: GET /:setting UT02-02-02: Should get 404 on wrong id",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "superagent.get(uri + '/some-id').end(function (err, res) {\n  if (err) {\n    assert.equal(res.status, status.NOT_FOUND)\n    done()\n  } else {\n    done(new Error('Here be an Error'))\n  }\n})",
      "err": {},
      "isRoot": false,
      "uuid": "c6dceecc-391d-4e4b-8783-f553ca7334cf",
      "parentUUID": "16ab08e4-5186-43cf-a399-f39c31391743",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT02-03-01: Should Update a Setting by Name",
      "fullTitle": "UT02-03: PUT /:setting UT02-03-01: Should Update a Setting by Name",
      "timedOut": false,
      "duration": 23,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "superagent.put(uri + '/' + setting).type('text/plain').send(setting_val2).end(function (err, res) {\n  assert.ifError(err)\n  assert.equal(res.status, status.OK)\n  assert.equal(res.text, setting_val2)\n  superagent.get(uri + '/').end(function (err, res) {\n    assert.ifError(err)\n    assert.equal(res.status, status.OK)\n    var result = JSON.parse(res.text)\n    assert.equal(Object.keys(result).length, 4)\n    assert.equal(result[setting], setting_val2)\n    done()\n  })\n})",
      "err": {},
      "isRoot": false,
      "uuid": "a997ec97-a5cb-43c2-ad02-20dcd7280c36",
      "parentUUID": "f33a1d6d-f4e2-49eb-9ae3-d524cbfcea09",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT02-05-02: Should Error on no Data in PUT",
      "fullTitle": "UT02-03: PUT /:setting UT02-05-02: Should Error on no Data in PUT",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "superagent.put(uri + '/' + setting).send({}).end(function (err, res) {\n  if (err) {\n    assert.equal(res.status, status.BAD_REQUEST)\n    superagent.get(uri + '/').end(function (err, res) {\n      assert.ifError(err)\n      assert.equal(res.status, status.OK)\n      var result = JSON.parse(res.text)\n      assert.equal(Object.keys(result).length, 4)\n      assert.equal(result[setting], setting_val2)\n      done()\n    })\n  } else {\n    done(new Error('Here be an Error'))\n  }\n})",
      "err": {},
      "isRoot": false,
      "uuid": "7ad1a395-ebd6-458d-81a2-3a5df8e02bdc",
      "parentUUID": "f33a1d6d-f4e2-49eb-9ae3-d524cbfcea09",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT02-05-03: Should Error on wrong ID",
      "fullTitle": "UT02-03: PUT /:setting UT02-05-03: Should Error on wrong ID",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "superagent.put(uri + '/someid').send(setting_val2).end(function (err, res) {\n  if (err) {\n    assert.equal(res.status, status.NOT_FOUND)\n    superagent.get(uri + '/').end(function (err, res) {\n      assert.ifError(err)\n      assert.equal(res.status, status.OK)\n      var result = JSON.parse(res.text)\n      assert.equal(Object.keys(result).length, 4)\n      assert.equal(result[setting], setting_val2)\n      done()\n    })\n  } else {\n    done(new Error('Here be an Error'))\n  }\n})",
      "err": {},
      "isRoot": false,
      "uuid": "96bde638-b83e-481a-bd60-c44ef9316034",
      "parentUUID": "f33a1d6d-f4e2-49eb-9ae3-d524cbfcea09",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT01-01-01: should return an error with no path",
      "fullTitle": "UT01-01: Object Contructor UT01-01-01: should return an error with no path",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "try {\n  Settings()\n  done(new Error('there should be an error here'))\n} catch (error) {\n  done()\n}",
      "err": {},
      "isRoot": false,
      "uuid": "13584045-05fd-43e0-8688-e9d78aa1c727",
      "parentUUID": "26f621eb-07b6-473f-b42d-2e53afbe084b",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT01-01-02: should return a settings object with a correct path",
      "fullTitle": "UT01-01: Object Contructor UT01-01-02: should return a settings object with a correct path",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "try {\n  var settings = new Settings(dbPath)\n  assert.equal(settings.file, dbPath)\n  assert.equal(Object.keys(settings.settings).length, 4)\n  done()\n} catch (error) {\n  done(error)\n}",
      "err": {},
      "isRoot": false,
      "uuid": "62eab251-4518-4e80-9d78-12894367cb14",
      "parentUUID": "26f621eb-07b6-473f-b42d-2e53afbe084b",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT01-02-01: should throw an error with no callback given",
      "fullTitle": "UT01-02: settings.list UT01-02-01: should throw an error with no callback given",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "try {\n  TSettings.list()\n  done(new Error('there should be an error here'))\n} catch (error) {\n  done()\n}",
      "err": {},
      "isRoot": false,
      "uuid": "b7cd398d-1af6-4414-8325-a8ba4bbea33d",
      "parentUUID": "4581e959-6a25-4dd4-8759-df0537489fbc",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT01-02-02: should callback all settings",
      "fullTitle": "UT01-02: settings.list UT01-02-02: should callback all settings",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "TSettings.list(function (error, settings) {\n  if (error) {\n    done(error)\n  } else {\n    assert.equal(Object.keys(settings).length, 4)\n    assert.equal(settings[setting], setting_val1)\n    done()\n  }\n})",
      "err": {},
      "isRoot": false,
      "uuid": "49313b72-866b-4269-b68b-ddee2f0084fd",
      "parentUUID": "4581e959-6a25-4dd4-8759-df0537489fbc",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT01-03-01: should throw an error with no callback given",
      "fullTitle": "UT01-03: settings.getSetting UT01-03-01: should throw an error with no callback given",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "try {\n  TSettings.getSetting(setting)\n  done(new Error('there should be an error here'))\n} catch (error) {\n  done()\n}",
      "err": {},
      "isRoot": false,
      "uuid": "3d3b3431-2eed-4129-bb37-8e06adb1528b",
      "parentUUID": "7a383574-5015-43d2-a661-25872c272ab8",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT01-03-02: should throw an error with no name given",
      "fullTitle": "UT01-03: settings.getSetting UT01-03-02: should throw an error with no name given",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "try {\n  TSettings.getSetting()\n  done(new Error('there should be an error here'))\n} catch (error) {\n  done()\n}",
      "err": {},
      "isRoot": false,
      "uuid": "feb29ffd-88af-432c-a168-27d0ee330aff",
      "parentUUID": "7a383574-5015-43d2-a661-25872c272ab8",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT01-03-03: should callback an error with a not existing name given",
      "fullTitle": "UT01-03: settings.getSetting UT01-03-03: should callback an error with a not existing name given",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "TSettings.getSetting('#', function (error, entry) {\n  if (error) {\n    assert.equal(error.message, 'No Setting with name # found')\n    done()\n  } else {\n    done(new Error('there should be an error here'))\n  }\n})",
      "err": {},
      "isRoot": false,
      "uuid": "fc8effa6-3d6f-454b-a791-e5a14b364521",
      "parentUUID": "7a383574-5015-43d2-a661-25872c272ab8",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT01-03-04: should callback an object with a correct id given",
      "fullTitle": "UT01-03: settings.getSetting UT01-03-04: should callback an object with a correct id given",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "TSettings.getSetting(setting, function (error, setValue) {\n  if (error) {\n    done(error)\n  } else {\n    assert.equal(setValue, setting_val1)\n    done()\n  }\n})",
      "err": {},
      "isRoot": false,
      "uuid": "41c1959b-c0b5-48bf-87e1-cefb8ae1d5f8",
      "parentUUID": "7a383574-5015-43d2-a661-25872c272ab8",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT01-04-01: should throw an error with no id given",
      "fullTitle": "UT01-04: settings.updateSetting UT01-04-01: should throw an error with no id given",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "try {\n  TSettings.updateSetting()\n  done(new Error('there should be an error here'))\n} catch (error) {\n  done()\n}",
      "err": {},
      "isRoot": false,
      "uuid": "f45ffcc3-c425-48e7-bf0e-853f0326ae6d",
      "parentUUID": "069efcbb-c9b0-44d8-a71c-2a8a28ce32db",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT01-04-02: should throw an error with no data given",
      "fullTitle": "UT01-04: settings.updateSetting UT01-04-02: should throw an error with no data given",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "try {\n  TSettings.updateSetting(setting)\n  done(new Error('there should be an error here'))\n} catch (error) {\n  done()\n}",
      "err": {},
      "isRoot": false,
      "uuid": "fcda9e20-e0e1-46cd-be9c-239b34049620",
      "parentUUID": "069efcbb-c9b0-44d8-a71c-2a8a28ce32db",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT01-04-03: should throw an error with no callback given",
      "fullTitle": "UT01-04: settings.updateSetting UT01-04-03: should throw an error with no callback given",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "try {\n  TSettings.updateSetting(setting, setting_val2)\n  done(new Error('there should be an error here'))\n} catch (error) {\n  done()\n}",
      "err": {},
      "isRoot": false,
      "uuid": "4e18c615-b174-4cdd-a73b-5b4d08d2a1c3",
      "parentUUID": "069efcbb-c9b0-44d8-a71c-2a8a28ce32db",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT01-04-04: should callback an error with a not existing id given",
      "fullTitle": "UT01-04: settings.updateSetting UT01-04-04: should callback an error with a not existing id given",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "TSettings.updateSetting('#', setting_val2, function (error, obj) {\n  if (error) {\n    done()\n  } else {\n    done(new Error('there should be an error here'))\n  }\n})",
      "err": {},
      "isRoot": false,
      "uuid": "bcddc287-4e6b-4c7b-9cf9-1ab942738568",
      "parentUUID": "069efcbb-c9b0-44d8-a71c-2a8a28ce32db",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT01-04-05: should callback an object with id given and database should contain this changed object",
      "fullTitle": "UT01-04: settings.updateSetting UT01-04-05: should callback an object with id given and database should contain this changed object",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "TSettings.updateSetting(setting, setting_val2, function (error, setVal) {\n  if (error) {\n    done(error)\n  } else {\n    assert.equal(setVal, setting_val2)\n    TSettings.list(function (error, settings) {\n      if (error) {\n        done(error)\n      } else {\n        assert.equal(Object.keys(settings).length, 4)\n        assert.equal(settings[setting], setting_val2)\n        done()\n      }\n    })\n  }\n})",
      "err": {},
      "isRoot": false,
      "uuid": "237787ab-4dec-4dfe-a46b-26d4f41f894c",
      "parentUUID": "069efcbb-c9b0-44d8-a71c-2a8a28ce32db",
      "isHook": false,
      "skipped": false
    }
  ],
  "allPending": [],
  "allPasses": [
    {
      "title": "UT02-01-01: Should List all Settings",
      "fullTitle": "UT02-01: GET / UT02-01-01: Should List all Settings",
      "timedOut": false,
      "duration": 26,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "superagent.get(uri + '/').end(function (err, res) {\n  assert.ifError(err)\n  assert.equal(res.status, status.OK)\n  var result = JSON.parse(res.text)\n  assert.equal(Object.keys(result).length, 4)\n  assert.equal(result[setting], setting_val1)\n  done()\n})",
      "err": {},
      "isRoot": false,
      "uuid": "92358c54-6532-44c3-bdf8-7a51bebe24bf",
      "parentUUID": "11e572b1-daeb-4e11-ab53-959325b18867",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT02-02-01: Should get setting by name",
      "fullTitle": "UT02-02: GET /:setting UT02-02-01: Should get setting by name",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "superagent.get(uri + '/' + setting).end(function (err, res) {\n  assert.ifError(err)\n  assert.equal(res.status, status.OK)\n  assert.equal(res.text, setting_val1)\n  done()\n})",
      "err": {},
      "isRoot": false,
      "uuid": "eb2858bd-5b5c-4704-9083-443258365860",
      "parentUUID": "16ab08e4-5186-43cf-a399-f39c31391743",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT02-02-02: Should get 404 on wrong id",
      "fullTitle": "UT02-02: GET /:setting UT02-02-02: Should get 404 on wrong id",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "superagent.get(uri + '/some-id').end(function (err, res) {\n  if (err) {\n    assert.equal(res.status, status.NOT_FOUND)\n    done()\n  } else {\n    done(new Error('Here be an Error'))\n  }\n})",
      "err": {},
      "isRoot": false,
      "uuid": "c6dceecc-391d-4e4b-8783-f553ca7334cf",
      "parentUUID": "16ab08e4-5186-43cf-a399-f39c31391743",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT02-03-01: Should Update a Setting by Name",
      "fullTitle": "UT02-03: PUT /:setting UT02-03-01: Should Update a Setting by Name",
      "timedOut": false,
      "duration": 23,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "superagent.put(uri + '/' + setting).type('text/plain').send(setting_val2).end(function (err, res) {\n  assert.ifError(err)\n  assert.equal(res.status, status.OK)\n  assert.equal(res.text, setting_val2)\n  superagent.get(uri + '/').end(function (err, res) {\n    assert.ifError(err)\n    assert.equal(res.status, status.OK)\n    var result = JSON.parse(res.text)\n    assert.equal(Object.keys(result).length, 4)\n    assert.equal(result[setting], setting_val2)\n    done()\n  })\n})",
      "err": {},
      "isRoot": false,
      "uuid": "a997ec97-a5cb-43c2-ad02-20dcd7280c36",
      "parentUUID": "f33a1d6d-f4e2-49eb-9ae3-d524cbfcea09",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT02-05-02: Should Error on no Data in PUT",
      "fullTitle": "UT02-03: PUT /:setting UT02-05-02: Should Error on no Data in PUT",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "superagent.put(uri + '/' + setting).send({}).end(function (err, res) {\n  if (err) {\n    assert.equal(res.status, status.BAD_REQUEST)\n    superagent.get(uri + '/').end(function (err, res) {\n      assert.ifError(err)\n      assert.equal(res.status, status.OK)\n      var result = JSON.parse(res.text)\n      assert.equal(Object.keys(result).length, 4)\n      assert.equal(result[setting], setting_val2)\n      done()\n    })\n  } else {\n    done(new Error('Here be an Error'))\n  }\n})",
      "err": {},
      "isRoot": false,
      "uuid": "7ad1a395-ebd6-458d-81a2-3a5df8e02bdc",
      "parentUUID": "f33a1d6d-f4e2-49eb-9ae3-d524cbfcea09",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT02-05-03: Should Error on wrong ID",
      "fullTitle": "UT02-03: PUT /:setting UT02-05-03: Should Error on wrong ID",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "superagent.put(uri + '/someid').send(setting_val2).end(function (err, res) {\n  if (err) {\n    assert.equal(res.status, status.NOT_FOUND)\n    superagent.get(uri + '/').end(function (err, res) {\n      assert.ifError(err)\n      assert.equal(res.status, status.OK)\n      var result = JSON.parse(res.text)\n      assert.equal(Object.keys(result).length, 4)\n      assert.equal(result[setting], setting_val2)\n      done()\n    })\n  } else {\n    done(new Error('Here be an Error'))\n  }\n})",
      "err": {},
      "isRoot": false,
      "uuid": "96bde638-b83e-481a-bd60-c44ef9316034",
      "parentUUID": "f33a1d6d-f4e2-49eb-9ae3-d524cbfcea09",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT01-01-01: should return an error with no path",
      "fullTitle": "UT01-01: Object Contructor UT01-01-01: should return an error with no path",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "try {\n  Settings()\n  done(new Error('there should be an error here'))\n} catch (error) {\n  done()\n}",
      "err": {},
      "isRoot": false,
      "uuid": "13584045-05fd-43e0-8688-e9d78aa1c727",
      "parentUUID": "26f621eb-07b6-473f-b42d-2e53afbe084b",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT01-01-02: should return a settings object with a correct path",
      "fullTitle": "UT01-01: Object Contructor UT01-01-02: should return a settings object with a correct path",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "try {\n  var settings = new Settings(dbPath)\n  assert.equal(settings.file, dbPath)\n  assert.equal(Object.keys(settings.settings).length, 4)\n  done()\n} catch (error) {\n  done(error)\n}",
      "err": {},
      "isRoot": false,
      "uuid": "62eab251-4518-4e80-9d78-12894367cb14",
      "parentUUID": "26f621eb-07b6-473f-b42d-2e53afbe084b",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT01-02-01: should throw an error with no callback given",
      "fullTitle": "UT01-02: settings.list UT01-02-01: should throw an error with no callback given",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "try {\n  TSettings.list()\n  done(new Error('there should be an error here'))\n} catch (error) {\n  done()\n}",
      "err": {},
      "isRoot": false,
      "uuid": "b7cd398d-1af6-4414-8325-a8ba4bbea33d",
      "parentUUID": "4581e959-6a25-4dd4-8759-df0537489fbc",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT01-02-02: should callback all settings",
      "fullTitle": "UT01-02: settings.list UT01-02-02: should callback all settings",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "TSettings.list(function (error, settings) {\n  if (error) {\n    done(error)\n  } else {\n    assert.equal(Object.keys(settings).length, 4)\n    assert.equal(settings[setting], setting_val1)\n    done()\n  }\n})",
      "err": {},
      "isRoot": false,
      "uuid": "49313b72-866b-4269-b68b-ddee2f0084fd",
      "parentUUID": "4581e959-6a25-4dd4-8759-df0537489fbc",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT01-03-01: should throw an error with no callback given",
      "fullTitle": "UT01-03: settings.getSetting UT01-03-01: should throw an error with no callback given",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "try {\n  TSettings.getSetting(setting)\n  done(new Error('there should be an error here'))\n} catch (error) {\n  done()\n}",
      "err": {},
      "isRoot": false,
      "uuid": "3d3b3431-2eed-4129-bb37-8e06adb1528b",
      "parentUUID": "7a383574-5015-43d2-a661-25872c272ab8",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT01-03-02: should throw an error with no name given",
      "fullTitle": "UT01-03: settings.getSetting UT01-03-02: should throw an error with no name given",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "try {\n  TSettings.getSetting()\n  done(new Error('there should be an error here'))\n} catch (error) {\n  done()\n}",
      "err": {},
      "isRoot": false,
      "uuid": "feb29ffd-88af-432c-a168-27d0ee330aff",
      "parentUUID": "7a383574-5015-43d2-a661-25872c272ab8",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT01-03-03: should callback an error with a not existing name given",
      "fullTitle": "UT01-03: settings.getSetting UT01-03-03: should callback an error with a not existing name given",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "TSettings.getSetting('#', function (error, entry) {\n  if (error) {\n    assert.equal(error.message, 'No Setting with name # found')\n    done()\n  } else {\n    done(new Error('there should be an error here'))\n  }\n})",
      "err": {},
      "isRoot": false,
      "uuid": "fc8effa6-3d6f-454b-a791-e5a14b364521",
      "parentUUID": "7a383574-5015-43d2-a661-25872c272ab8",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT01-03-04: should callback an object with a correct id given",
      "fullTitle": "UT01-03: settings.getSetting UT01-03-04: should callback an object with a correct id given",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "TSettings.getSetting(setting, function (error, setValue) {\n  if (error) {\n    done(error)\n  } else {\n    assert.equal(setValue, setting_val1)\n    done()\n  }\n})",
      "err": {},
      "isRoot": false,
      "uuid": "41c1959b-c0b5-48bf-87e1-cefb8ae1d5f8",
      "parentUUID": "7a383574-5015-43d2-a661-25872c272ab8",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT01-04-01: should throw an error with no id given",
      "fullTitle": "UT01-04: settings.updateSetting UT01-04-01: should throw an error with no id given",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "try {\n  TSettings.updateSetting()\n  done(new Error('there should be an error here'))\n} catch (error) {\n  done()\n}",
      "err": {},
      "isRoot": false,
      "uuid": "f45ffcc3-c425-48e7-bf0e-853f0326ae6d",
      "parentUUID": "069efcbb-c9b0-44d8-a71c-2a8a28ce32db",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT01-04-02: should throw an error with no data given",
      "fullTitle": "UT01-04: settings.updateSetting UT01-04-02: should throw an error with no data given",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "try {\n  TSettings.updateSetting(setting)\n  done(new Error('there should be an error here'))\n} catch (error) {\n  done()\n}",
      "err": {},
      "isRoot": false,
      "uuid": "fcda9e20-e0e1-46cd-be9c-239b34049620",
      "parentUUID": "069efcbb-c9b0-44d8-a71c-2a8a28ce32db",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT01-04-03: should throw an error with no callback given",
      "fullTitle": "UT01-04: settings.updateSetting UT01-04-03: should throw an error with no callback given",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "try {\n  TSettings.updateSetting(setting, setting_val2)\n  done(new Error('there should be an error here'))\n} catch (error) {\n  done()\n}",
      "err": {},
      "isRoot": false,
      "uuid": "4e18c615-b174-4cdd-a73b-5b4d08d2a1c3",
      "parentUUID": "069efcbb-c9b0-44d8-a71c-2a8a28ce32db",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT01-04-04: should callback an error with a not existing id given",
      "fullTitle": "UT01-04: settings.updateSetting UT01-04-04: should callback an error with a not existing id given",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "TSettings.updateSetting('#', setting_val2, function (error, obj) {\n  if (error) {\n    done()\n  } else {\n    done(new Error('there should be an error here'))\n  }\n})",
      "err": {},
      "isRoot": false,
      "uuid": "bcddc287-4e6b-4c7b-9cf9-1ab942738568",
      "parentUUID": "069efcbb-c9b0-44d8-a71c-2a8a28ce32db",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT01-04-05: should callback an object with id given and database should contain this changed object",
      "fullTitle": "UT01-04: settings.updateSetting UT01-04-05: should callback an object with id given and database should contain this changed object",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "TSettings.updateSetting(setting, setting_val2, function (error, setVal) {\n  if (error) {\n    done(error)\n  } else {\n    assert.equal(setVal, setting_val2)\n    TSettings.list(function (error, settings) {\n      if (error) {\n        done(error)\n      } else {\n        assert.equal(Object.keys(settings).length, 4)\n        assert.equal(settings[setting], setting_val2)\n        done()\n      }\n    })\n  }\n})",
      "err": {},
      "isRoot": false,
      "uuid": "237787ab-4dec-4dfe-a46b-26d4f41f894c",
      "parentUUID": "069efcbb-c9b0-44d8-a71c-2a8a28ce32db",
      "isHook": false,
      "skipped": false
    }
  ],
  "allFailures": [],
  "copyrightYear": 2018
}